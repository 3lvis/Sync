// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreData;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSManagedObjectContext;
enum DATAStackStoreType : NSInteger;
@class NSBundle;
@class NSManagedObjectModel;
@class NSError;

SWIFT_CLASS("_TtC9DATAStack9DATAStack")
@interface DATAStack : NSObject
/**
  The context for the main queue. Please do not use this to mutate data, use \code
  performInNewBackgroundContext
  \endcode
  instead.
*/
@property (nonatomic, readonly, strong) NSManagedObjectContext * _Nonnull mainContext;
/**
  The context for the main queue. Please do not use this to mutate data, use \code
  performBackgroundTask
  \endcode
  instead.
*/
@property (nonatomic, readonly, strong) NSManagedObjectContext * _Nonnull viewContext;
/**
  Initializes a DATAStack using the bundle name as the model name, so if your target is called ModernApp,
  it will look for a ModernApp.xcdatamodeld.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DATAStack using the provided model name.
  \param modelName The name of your Core Data model (xcdatamodeld).

*/
- (nonnull instancetype)initWithModelName:(NSString * _Nonnull)modelName OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DATAStack using the provided model name, bundle and storeType.
  \param modelName The name of your Core Data model (xcdatamodeld).

  \param storeType The store type to be used, you have .InMemory and .SQLite, the first one is memory
  based and doesn’t save to disk, while the second one creates a .sqlite file and stores things there.

*/
- (nonnull instancetype)initWithModelName:(NSString * _Nonnull)modelName storeType:(enum DATAStackStoreType)storeType OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DATAStack using the provided model name, bundle and storeType.
  \param modelName The name of your Core Data model (xcdatamodeld).

  \param bundle The bundle where your Core Data model is located, normally your Core Data model is in
  the main bundle but when using unit tests sometimes your Core Data model could be located where your tests
  are located.

  \param storeType The store type to be used, you have .InMemory and .SQLite, the first one is memory
  based and doesn’t save to disk, while the second one creates a .sqlite file and stores things there.

*/
- (nonnull instancetype)initWithModelName:(NSString * _Nonnull)modelName bundle:(NSBundle * _Nonnull)bundle storeType:(enum DATAStackStoreType)storeType OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DATAStack using the provided model name, bundle, storeType and store name.
  \param modelName The name of your Core Data model (xcdatamodeld).

  \param bundle The bundle where your Core Data model is located, normally your Core Data model is in
  the main bundle but when using unit tests sometimes your Core Data model could be located where your tests
  are located.

  \param storeType The store type to be used, you have .InMemory and .SQLite, the first one is memory
  based and doesn’t save to disk, while the second one creates a .sqlite file and stores things there.

  \param storeName Normally your file would be named as your model name is named, so if your model
  name is AwesomeApp then the .sqlite file will be named AwesomeApp.sqlite, this attribute allows your to
  change that.

*/
- (nonnull instancetype)initWithModelName:(NSString * _Nonnull)modelName bundle:(NSBundle * _Nonnull)bundle storeType:(enum DATAStackStoreType)storeType storeName:(NSString * _Nonnull)storeName OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DATAStack using the provided model name, bundle, storeType and store name.
  \param modelName The name of your Core Data model (xcdatamodeld).

  \param bundle The bundle where your Core Data model is located, normally your Core Data model is in
  the main bundle but when using unit tests sometimes your Core Data model could be located where your tests
  are located.

  \param storeType The store type to be used, you have .InMemory and .SQLite, the first one is memory
  based and doesn’t save to disk, while the second one creates a .sqlite file and stores things there.

  \param storeName Normally your file would be named as your model name is named, so if your model
  name is AwesomeApp then the .sqlite file will be named AwesomeApp.sqlite, this attribute allows your to
  change that.

  \param containerURL The container URL for the sqlite file when a store type of SQLite is used.

*/
- (nonnull instancetype)initWithModelName:(NSString * _Nonnull)modelName bundle:(NSBundle * _Nonnull)bundle storeType:(enum DATAStackStoreType)storeType storeName:(NSString * _Nonnull)storeName containerURL:(NSURL * _Nonnull)containerURL OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DATAStack using the provided model name, bundle and storeType.
  \param model The model that we’ll use to set up your DATAStack.

  \param storeType The store type to be used, you have .InMemory and .SQLite, the first one is memory
  based and doesn’t save to disk, while the second one creates a .sqlite file and stores things there.

*/
- (nonnull instancetype)initWithModel:(NSManagedObjectModel * _Nonnull)model storeType:(enum DATAStackStoreType)storeType OBJC_DESIGNATED_INITIALIZER;
/**
  Returns a new main context that is detached from saving to disk.
*/
- (NSManagedObjectContext * _Nonnull)newDisposableMainContext;
/**
  Returns a background context perfect for data mutability operations. Make sure to never use it on the main thread. Use \code
  performBlock
  \endcode or \code
  performBlockAndWait
  \endcode to use it.
  Saving to this context doesn’t merge with the main thread. This context is specially useful to run operations that don’t block the main thread. To refresh your main thread objects for
  example when using a NSFetchedResultsController use \code
  try self.fetchedResultsController.performFetch()
  \endcode.
*/
- (NSManagedObjectContext * _Nonnull)newNonMergingBackgroundContext;
/**
  Returns a background context perfect for data mutability operations. Make sure to never use it on the main thread. Use \code
  performBlock
  \endcode or \code
  performBlockAndWait
  \endcode to use it.
*/
- (NSManagedObjectContext * _Nonnull)newBackgroundContext;
/**
  Returns a background context perfect for data mutability operations.
  \param operation The block that contains the created background context.

*/
- (void)performInNewBackgroundContext:(void (^ _Nonnull)(NSManagedObjectContext * _Nonnull))operation;
/**
  Returns a background context perfect for data mutability operations.
  \param operation The block that contains the created background context.

*/
- (void)performBackgroundTaskWithOperation:(void (^ _Nonnull)(NSManagedObjectContext * _Nonnull))operation;
- (void)saveMainThreadWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/**
  Drops the database. Useful for ObjC compatibility, since it doesn’t allow \code
  throws
  \endcode Use \code
  drop
  \endcode in Swift.
*/
- (void)forceDrop;
/**
  Drops the database.
*/
- (BOOL)dropAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)mainContextDidSave:(NSNotification * _Nonnull)notification;
- (void)newDisposableMainContextWillSave:(NSNotification * _Nonnull)notification;
- (BOOL)backgroundContextDidSave:(NSNotification * _Nonnull)notification error:(NSError * _Nullable * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, DATAStackStoreType) {
  DATAStackStoreTypeInMemory = 0,
  DATAStackStoreTypeSqLite = 1,
};


@interface NSError (SWIFT_EXTENSION(DATAStack))
- (nonnull instancetype)initWithInfo:(NSString * _Nonnull)info previousError:(NSError * _Nullable)previousError;
@end


@interface NSManagedObjectModel (SWIFT_EXTENSION(DATAStack))
- (nonnull instancetype)initWithBundle:(NSBundle * _Nonnull)bundle name:(NSString * _Nonnull)name;
@end


@interface NSPersistentStoreCoordinator (SWIFT_EXTENSION(DATAStack))
- (BOOL)addPersistentStoreWithStoreType:(enum DATAStackStoreType)storeType bundle:(NSBundle * _Nonnull)bundle modelName:(NSString * _Nonnull)modelName storeName:(NSString * _Nullable)storeName containerURL:(NSURL * _Nonnull)containerURL error:(NSError * _Nullable * _Nullable)error;
@end

#pragma clang diagnostic pop
